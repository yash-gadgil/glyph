// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WatchlistService_GetWatchlists_FullMethodName   = "/user.WatchlistService/GetWatchlists"
	WatchlistService_GetWatchlist_FullMethodName    = "/user.WatchlistService/GetWatchlist"
	WatchlistService_CreateWatchList_FullMethodName = "/user.WatchlistService/CreateWatchList"
)

// WatchlistServiceClient is the client API for WatchlistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatchlistServiceClient interface {
	GetWatchlists(ctx context.Context, in *WatchlistsRequest, opts ...grpc.CallOption) (*WatchlistsResponse, error)
	GetWatchlist(ctx context.Context, in *WatchlistRequest, opts ...grpc.CallOption) (*Watchlist, error)
	CreateWatchList(ctx context.Context, in *CreateWatchlistRequest, opts ...grpc.CallOption) (*CreateWatchlistResponse, error)
}

type watchlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchlistServiceClient(cc grpc.ClientConnInterface) WatchlistServiceClient {
	return &watchlistServiceClient{cc}
}

func (c *watchlistServiceClient) GetWatchlists(ctx context.Context, in *WatchlistsRequest, opts ...grpc.CallOption) (*WatchlistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WatchlistsResponse)
	err := c.cc.Invoke(ctx, WatchlistService_GetWatchlists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchlistServiceClient) GetWatchlist(ctx context.Context, in *WatchlistRequest, opts ...grpc.CallOption) (*Watchlist, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Watchlist)
	err := c.cc.Invoke(ctx, WatchlistService_GetWatchlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchlistServiceClient) CreateWatchList(ctx context.Context, in *CreateWatchlistRequest, opts ...grpc.CallOption) (*CreateWatchlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWatchlistResponse)
	err := c.cc.Invoke(ctx, WatchlistService_CreateWatchList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchlistServiceServer is the server API for WatchlistService service.
// All implementations must embed UnimplementedWatchlistServiceServer
// for forward compatibility.
type WatchlistServiceServer interface {
	GetWatchlists(context.Context, *WatchlistsRequest) (*WatchlistsResponse, error)
	GetWatchlist(context.Context, *WatchlistRequest) (*Watchlist, error)
	CreateWatchList(context.Context, *CreateWatchlistRequest) (*CreateWatchlistResponse, error)
	mustEmbedUnimplementedWatchlistServiceServer()
}

// UnimplementedWatchlistServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWatchlistServiceServer struct{}

func (UnimplementedWatchlistServiceServer) GetWatchlists(context.Context, *WatchlistsRequest) (*WatchlistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWatchlists not implemented")
}
func (UnimplementedWatchlistServiceServer) GetWatchlist(context.Context, *WatchlistRequest) (*Watchlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWatchlist not implemented")
}
func (UnimplementedWatchlistServiceServer) CreateWatchList(context.Context, *CreateWatchlistRequest) (*CreateWatchlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWatchList not implemented")
}
func (UnimplementedWatchlistServiceServer) mustEmbedUnimplementedWatchlistServiceServer() {}
func (UnimplementedWatchlistServiceServer) testEmbeddedByValue()                          {}

// UnsafeWatchlistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchlistServiceServer will
// result in compilation errors.
type UnsafeWatchlistServiceServer interface {
	mustEmbedUnimplementedWatchlistServiceServer()
}

func RegisterWatchlistServiceServer(s grpc.ServiceRegistrar, srv WatchlistServiceServer) {
	// If the following call pancis, it indicates UnimplementedWatchlistServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WatchlistService_ServiceDesc, srv)
}

func _WatchlistService_GetWatchlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchlistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchlistServiceServer).GetWatchlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchlistService_GetWatchlists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchlistServiceServer).GetWatchlists(ctx, req.(*WatchlistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchlistService_GetWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchlistServiceServer).GetWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchlistService_GetWatchlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchlistServiceServer).GetWatchlist(ctx, req.(*WatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchlistService_CreateWatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchlistServiceServer).CreateWatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchlistService_CreateWatchList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchlistServiceServer).CreateWatchList(ctx, req.(*CreateWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WatchlistService_ServiceDesc is the grpc.ServiceDesc for WatchlistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatchlistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.WatchlistService",
	HandlerType: (*WatchlistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWatchlists",
			Handler:    _WatchlistService_GetWatchlists_Handler,
		},
		{
			MethodName: "GetWatchlist",
			Handler:    _WatchlistService_GetWatchlist_Handler,
		},
		{
			MethodName: "CreateWatchList",
			Handler:    _WatchlistService_CreateWatchList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
